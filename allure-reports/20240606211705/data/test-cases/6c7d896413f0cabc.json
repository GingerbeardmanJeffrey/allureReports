{
  "uid" : "6c7d896413f0cabc",
  "name" : "test_get_search_term",
  "fullName" : "tests.test_api_members#test_get_search_term",
  "historyId" : "63f53fa488f0fb03fc82c77e57d8f36a",
  "time" : {
    "start" : 1717708694293,
    "stop" : 1717708694684,
    "duration" : 391
  },
  "status" : "broken",
  "statusMessage" : "jsonschema.exceptions.ValidationError: 7633 is not of type 'string', 'null'\n\nFailed validating 'type' in schema['items']['properties']['sponsorId']:\n    {'type': ['string', 'null']}\n\nOn instance[0]['sponsorId']:\n    7633",
  "statusTrace" : "api_url = 'https://api.dev.nerdunited.net/membership/api'\nauth_token = 'eyJhbGciOiJSUzI1NiIsImtpZCI6IjMzMDUxMThiZTBmNTZkYzA4NGE0NmExN2RiNzU1NjVkNzY4YmE2ZmUiLCJ0eXAiOiJKV1QifQ.eyJ0ZW5hbnQiOi...8njH3g3KT8R0snBIBDQ18OgxspnPRvcjmygWKgZNEgo1XI44nRyaV-S8EttUzKXHXE7K0olu1dR7EyYCLaF3xURoFEkdZ8XUV5133NiLLD27Fo3m4NMZqg'\nconfig = <module 'config' from '/home/runner/work/qa-nerd-core-backend/qa-nerd-core-backend/config.py'>\napi_get_search_term_schema = {'items': {'properties': {'authenticatorEnabled': {'type': 'boolean'}, 'authenticatorSalt': {'type': 'string'}, 'birth...}, 'required': ['id', 'memberType', 'name', 'email', 'phone', 'memberNumber', ...], 'type': 'object'}, 'type': 'array'}\n\n    def test_get_search_term(api_url, auth_token, config, api_get_search_term_schema):\n        url = f\"{api_url}/members/search/{config.MEMBER_ID}\"\n        headers = {\"Authorization\": f\"Bearer {auth_token}\"}\n        response = requests.get(url=url, headers=headers)\n        api_response_conditions(response)\n>       jsonschema.validate(response.json(), api_get_search_term_schema)\n\ntests/test_api_members.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninstance = [{'authenticatorEnabled': False, 'authenticatorSalt': 'GGSa1guBJFKWC6tdnvkdZD5OOWNcXpzeC+Y7/xVf6w0=', 'birthDate': '1991-03-08T00:00:00', 'createdAt': '2023-04-06T16:08:40+00:00', ...}]\nschema = {'items': {'properties': {'authenticatorEnabled': {'type': 'boolean'}, 'authenticatorSalt': {'type': 'string'}, 'birth...}, 'required': ['id', 'memberType', 'name', 'email', 'phone', 'memberNumber', ...], 'type': 'object'}, 'type': 'array'}\ncls = <class 'jsonschema.validators.create.<locals>.Validator'>, args = ()\nkwargs = {}\nvalidator = <jsonschema.validators.create.<locals>.Validator object at 0x7fe9f2dd0e20>\nerror = <ValidationError: \"7633 is not of type 'string', 'null'\">\n\n    def validate(instance, schema, cls=None, *args, **kwargs):\n        \"\"\"\n        Validate an instance under the given schema.\n    \n            >>> validate([2, 3, 4], {\"maxItems\": 2})\n            Traceback (most recent call last):\n                ...\n            ValidationError: [2, 3, 4] is too long\n    \n        :func:`validate` will first verify that the provided schema is\n        itself valid, since not doing so can lead to less obvious error\n        messages and fail in less obvious or consistent ways.\n    \n        If you know you have a valid schema already, especially if you\n        intend to validate multiple instances with the same schema, you\n        likely would prefer using the `IValidator.validate` method directly\n        on a specific validator (e.g. ``Draft7Validator.validate``).\n    \n    \n        Arguments:\n    \n            instance:\n    \n                The instance to validate\n    \n            schema:\n    \n                The schema to validate with\n    \n            cls (IValidator):\n    \n                The class that will be used to validate the instance.\n    \n        If the ``cls`` argument is not provided, two things will happen\n        in accordance with the specification. First, if the schema has a\n        :validator:`$schema` property containing a known meta-schema [#]_\n        then the proper validator will be used. The specification recommends\n        that all schemas contain :validator:`$schema` properties for this\n        reason. If no :validator:`$schema` property is found, the default\n        validator class is the latest released draft.\n    \n        Any other provided positional and keyword arguments will be passed\n        on when instantiating the ``cls``.\n    \n        Raises:\n    \n            `jsonschema.exceptions.ValidationError` if the instance\n                is invalid\n    \n            `jsonschema.exceptions.SchemaError` if the schema itself\n                is invalid\n    \n        .. rubric:: Footnotes\n        .. [#] known by a validator registered with\n            `jsonschema.validators.validates`\n        \"\"\"\n        if cls is None:\n            cls = validator_for(schema)\n    \n        cls.check_schema(schema)\n        validator = cls(schema, *args, **kwargs)\n        error = exceptions.best_match(validator.iter_errors(instance))\n        if error is not None:\n>           raise error\nE           jsonschema.exceptions.ValidationError: 7633 is not of type 'string', 'null'\nE           \nE           Failed validating 'type' in schema['items']['properties']['sponsorId']:\nE               {'type': ['string', 'null']}\nE           \nE           On instance[0]['sponsorId']:\nE               7633\n\n/usr/lib/python3/dist-packages/jsonschema/validators.py:934: ValidationError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "config",
    "time" : {
      "start" : 1717708689591,
      "stop" : 1717708689591,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_version",
    "time" : {
      "start" : 1717708689591,
      "stop" : 1717708689591,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "environment",
    "time" : {
      "start" : 1717708689591,
      "stop" : 1717708689591,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "auth_token",
    "time" : {
      "start" : 1717708689591,
      "stop" : 1717708690317,
      "duration" : 726
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "base_url",
    "time" : {
      "start" : 1717708689591,
      "stop" : 1717708689591,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1717708689591,
      "stop" : 1717708689591,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_get_search_term_schema",
    "time" : {
      "start" : 1717708694293,
      "stop" : 1717708694293,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "jsonschema.exceptions.ValidationError: 7633 is not of type 'string', 'null'\n\nFailed validating 'type' in schema['items']['properties']['sponsorId']:\n    {'type': ['string', 'null']}\n\nOn instance[0]['sponsorId']:\n    7633",
    "statusTrace" : "api_url = 'https://api.dev.nerdunited.net/membership/api'\nauth_token = 'eyJhbGciOiJSUzI1NiIsImtpZCI6IjMzMDUxMThiZTBmNTZkYzA4NGE0NmExN2RiNzU1NjVkNzY4YmE2ZmUiLCJ0eXAiOiJKV1QifQ.eyJ0ZW5hbnQiOi...8njH3g3KT8R0snBIBDQ18OgxspnPRvcjmygWKgZNEgo1XI44nRyaV-S8EttUzKXHXE7K0olu1dR7EyYCLaF3xURoFEkdZ8XUV5133NiLLD27Fo3m4NMZqg'\nconfig = <module 'config' from '/home/runner/work/qa-nerd-core-backend/qa-nerd-core-backend/config.py'>\napi_get_search_term_schema = {'items': {'properties': {'authenticatorEnabled': {'type': 'boolean'}, 'authenticatorSalt': {'type': 'string'}, 'birth...}, 'required': ['id', 'memberType', 'name', 'email', 'phone', 'memberNumber', ...], 'type': 'object'}, 'type': 'array'}\n\n    def test_get_search_term(api_url, auth_token, config, api_get_search_term_schema):\n        url = f\"{api_url}/members/search/{config.MEMBER_ID}\"\n        headers = {\"Authorization\": f\"Bearer {auth_token}\"}\n        response = requests.get(url=url, headers=headers)\n        api_response_conditions(response)\n>       jsonschema.validate(response.json(), api_get_search_term_schema)\n\ntests/test_api_members.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninstance = [{'authenticatorEnabled': False, 'authenticatorSalt': 'GGSa1guBJFKWC6tdnvkdZD5OOWNcXpzeC+Y7/xVf6w0=', 'birthDate': '1991-03-08T00:00:00', 'createdAt': '2023-04-06T16:08:40+00:00', ...}]\nschema = {'items': {'properties': {'authenticatorEnabled': {'type': 'boolean'}, 'authenticatorSalt': {'type': 'string'}, 'birth...}, 'required': ['id', 'memberType', 'name', 'email', 'phone', 'memberNumber', ...], 'type': 'object'}, 'type': 'array'}\ncls = <class 'jsonschema.validators.create.<locals>.Validator'>, args = ()\nkwargs = {}\nvalidator = <jsonschema.validators.create.<locals>.Validator object at 0x7fe9f2dd0e20>\nerror = <ValidationError: \"7633 is not of type 'string', 'null'\">\n\n    def validate(instance, schema, cls=None, *args, **kwargs):\n        \"\"\"\n        Validate an instance under the given schema.\n    \n            >>> validate([2, 3, 4], {\"maxItems\": 2})\n            Traceback (most recent call last):\n                ...\n            ValidationError: [2, 3, 4] is too long\n    \n        :func:`validate` will first verify that the provided schema is\n        itself valid, since not doing so can lead to less obvious error\n        messages and fail in less obvious or consistent ways.\n    \n        If you know you have a valid schema already, especially if you\n        intend to validate multiple instances with the same schema, you\n        likely would prefer using the `IValidator.validate` method directly\n        on a specific validator (e.g. ``Draft7Validator.validate``).\n    \n    \n        Arguments:\n    \n            instance:\n    \n                The instance to validate\n    \n            schema:\n    \n                The schema to validate with\n    \n            cls (IValidator):\n    \n                The class that will be used to validate the instance.\n    \n        If the ``cls`` argument is not provided, two things will happen\n        in accordance with the specification. First, if the schema has a\n        :validator:`$schema` property containing a known meta-schema [#]_\n        then the proper validator will be used. The specification recommends\n        that all schemas contain :validator:`$schema` properties for this\n        reason. If no :validator:`$schema` property is found, the default\n        validator class is the latest released draft.\n    \n        Any other provided positional and keyword arguments will be passed\n        on when instantiating the ``cls``.\n    \n        Raises:\n    \n            `jsonschema.exceptions.ValidationError` if the instance\n                is invalid\n    \n            `jsonschema.exceptions.SchemaError` if the schema itself\n                is invalid\n    \n        .. rubric:: Footnotes\n        .. [#] known by a validator registered with\n            `jsonschema.validators.validates`\n        \"\"\"\n        if cls is None:\n            cls = validator_for(schema)\n    \n        cls.check_schema(schema)\n        validator = cls(schema, *args, **kwargs)\n        error = exceptions.best_match(validator.iter_errors(instance))\n        if error is not None:\n>           raise error\nE           jsonschema.exceptions.ValidationError: 7633 is not of type 'string', 'null'\nE           \nE           Failed validating 'type' in schema['items']['properties']['sponsorId']:\nE               {'type': ['string', 'null']}\nE           \nE           On instance[0]['sponsorId']:\nE               7633\n\n/usr/lib/python3/dist-packages/jsonschema/validators.py:934: ValidationError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "7d76431159b98a5c",
      "name" : "log",
      "source" : "7d76431159b98a5c.txt",
      "type" : "text/plain",
      "size" : 716
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "suite",
    "value" : "test_api_members"
  }, {
    "name" : "host",
    "value" : "fv-az1425-21"
  }, {
    "name" : "thread",
    "value" : "1585-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api_members"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "6c7d896413f0cabc.json",
  "parameterValues" : [ ]
}