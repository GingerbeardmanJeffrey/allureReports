{
  "uid" : "8254c05cb1b07aee",
  "name" : "test_get_transactions_token[usdc]",
  "fullName" : "tests.test_api_wallet#test_get_transactions_token",
  "historyId" : "bd2ceb14473ae6a038bf04672cdab3d6",
  "time" : {
    "start" : 1702019147349,
    "stop" : 1702019157349,
    "duration" : 10000
  },
  "status" : "failed",
  "statusMessage" : "Failed: Timeout >10.0s",
  "statusTrace" : "api_url = 'https://api.dev.nerdunited.net/wallet/api'\nauth_token = 'eyJhbGciOiJSUzI1NiIsImtpZCI6IjNhM2JkODk4ZGE1MGE4OWViOWUxY2YwYjdhN2VmZTM1OTNkNDEwNjgiLCJ0eXAiOiJKV1QifQ.eyJhZ3JlZW1lbn...oKi4usSUIyOUMT-BImORr99PeKQcLtDm2j2w0Zu7p9i5_qp5sdpTgnHYT_7OZMNfsfE2a3SFITJHeDl6JligXblDRvhU1fV3M6HQRZRyzUX2aVD9kaqOBA'\ncoin = 'usdc'\n\n    @pytest.mark.parametrize(\"coin\", [\"eth\", \"ize\", \"btc\", \"usdc\"])\n    def test_get_transactions_token(api_url, auth_token, coin):\n        url = f\"{api_url}/wallets/transactions/{coin}?core=true\"\n        headers = {\"Authorization\": f\"Bearer {auth_token}\"}\n>       response = requests.get(url=url, headers=headers)\n\ntests/test_api_wallet.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/lib/python3/dist-packages/requests/api.py:76: in get\n    return request('get', url, params=params, **kwargs)\n/usr/lib/python3/dist-packages/requests/api.py:61: in request\n    return session.request(method=method, url=url, **kwargs)\n/usr/lib/python3/dist-packages/requests/sessions.py:544: in request\n    resp = self.send(prep, **send_kwargs)\n/usr/lib/python3/dist-packages/requests/sessions.py:657: in send\n    r = adapter.send(request, **kwargs)\n/usr/lib/python3/dist-packages/requests/adapters.py:439: in send\n    resp = conn.urlopen(\n/usr/lib/python3/dist-packages/urllib3/connectionpool.py:700: in urlopen\n    httplib_response = self._make_request(\n/usr/lib/python3/dist-packages/urllib3/connectionpool.py:446: in _make_request\n    six.raise_from(e, None)\n<string>:3: in raise_from\n    ???\n/usr/lib/python3/dist-packages/urllib3/connectionpool.py:441: in _make_request\n    httplib_response = conn.getresponse()\n/usr/lib/python3.10/http/client.py:1375: in getresponse\n    response.begin()\n/usr/lib/python3.10/http/client.py:318: in begin\n    version, status, reason = self._read_status()\n/usr/lib/python3.10/http/client.py:279: in _read_status\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n/usr/lib/python3.10/socket.py:705: in readinto\n    return self._sock.recv_into(b)\n/usr/lib/python3.10/ssl.py:1274: in recv_into\n    return self.read(nbytes, buffer)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\nlen = 8192, buffer = <memory at 0x7f3791c2bd00>\n\n    def read(self, len=1024, buffer=None):\n        \"\"\"Read up to LEN bytes and return them.\n        Return zero-length string on EOF.\"\"\"\n    \n        self._checkClosed()\n        if self._sslobj is None:\n            raise ValueError(\"Read on closed or unwrapped SSL socket.\")\n        try:\n            if buffer is not None:\n>               return self._sslobj.read(len, buffer)\nE               Failed: Timeout >10.0s\n\n/usr/lib/python3.10/ssl.py:1130: Failed",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "api_version",
    "time" : {
      "start" : 1702019122025,
      "stop" : 1702019122026,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "environment",
    "time" : {
      "start" : 1702019122025,
      "stop" : 1702019122025,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "base_url",
    "time" : {
      "start" : 1702019122025,
      "stop" : 1702019122025,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "api_url",
    "time" : {
      "start" : 1702019122026,
      "stop" : 1702019122026,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "auth_token",
    "time" : {
      "start" : 1702019122026,
      "stop" : 1702019122594,
      "duration" : 568
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "config",
    "time" : {
      "start" : 1702019122026,
      "stop" : 1702019122026,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "suite",
    "value" : "test_api_wallet"
  }, {
    "name" : "host",
    "value" : "fv-az564-947"
  }, {
    "name" : "thread",
    "value" : "1896-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api_wallet"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "coin",
    "value" : "'usdc'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "8254c05cb1b07aee.json",
  "parameterValues" : [ "'usdc'" ]
}